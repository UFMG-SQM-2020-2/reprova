package br.ufmg.engsoft.reprova.model;

import java.util.HashMap;
import java.util.Map;


public class Question {
  /**
   * The id of the question.
   * When null, the id will be automatically generated by the database.
   */
  public final Integer id;
  /**
   * The theme of the question. Mustn't be null nor empty.
   */
  public final String theme;
  /**
   * The description of the question. Mustn't be null nor empty.
   */
  public final String description;
  /**
   * The statement of the question. Mustn't be null, may be empty.
   */
  public final byte[] statement;
  /**
   * The record of the question per semester per class. Mustn't be null, may be empty.
   */
  public final Map<Semester, Map<String, Float>> record;
  /**
   * Whether the question is private.
   */
  public final boolean pvt;



  public static class Builder {
    protected Integer id;
    protected String theme;
    protected String description;
    protected byte[] statement;
    protected Map<Semester, Map<String, Float>> record;
    protected boolean pvt = true;

    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    public Builder theme(String theme) {
      this.theme = theme;
      return this;
    }

    public Builder description(String description) {
      this.description = description;
      return this;
    }

    public Builder statement(byte[] statement) {
      this.statement = statement;
      return this;
    }

    public Builder record(Map<Semester, Map<String, Float>> record) {
      this.record = record;
      return this;
    }

    public Builder pvt(boolean pvt) {
      this.pvt = pvt;
      return this;
    }


    public Question build() {
      if (theme == null)
        throw new IllegalArgumentException("theme mustn't be null");

      if (theme.isEmpty())
        throw new IllegalArgumentException("theme mustn't be empty");

      if (description == null)
        throw new IllegalArgumentException("description mustn't be null");

      if (description.isEmpty())
        throw new IllegalArgumentException("description mustn't be empty");


      if (this.record == null)
        this.record = new HashMap<Semester, Map<String, Float>>();
      else
        // All inner maps mustn't be null:
        for (var entry : this.record.entrySet())
          if (entry.getValue() == null)
            throw new IllegalArgumentException("inner record mustn't be null");


      return new Question(
        this.id,
        this.theme,
        this.description,
        this.statement != null ? this.statement : new byte[0],
        this.record,
        this.pvt
      );
    }
  }

  protected Question(
    Integer id,
    String theme,
    String description,
    byte[] statement,
    Map<Semester, Map<String, Float>> record,
    boolean pvt
  ) {
    this.id = id;
    this.theme = theme;
    this.description = description;
    this.statement = statement;
    this.record = record;
    this.pvt = pvt;
  }



  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Question:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  theme: " + this.theme + "\n");
    builder.append("  desc: " + this.description + "\n");
    builder.append("  record: " + this.record + "\n");
    builder.append("  pvt: " + this.pvt + "\n");

    return builder.toString();
  }
}
